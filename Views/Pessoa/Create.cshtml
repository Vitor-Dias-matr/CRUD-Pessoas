@using static CadastroPessoas.Models.Enum.Enum;
﻿
@model PessoaViewModel

@{
    ViewData["Title"] = "Create";
}

<div class="row">
    <div class="col-md-6 offset-md-3 text-center">
        <h1>Cadastro Pessoa</h1>
    </div>
</div>

<hr />

<div class="row">
    <div class="col-md-6 offset-md-3">
        <form asp-action="Create">

            @* @Html.ValidationSummary(false, "", new { @class = "text-danger" }) *@

            @* <div id="error-message" class="text-danger"></div> *@


            <div class="form-group" id="cadastrar">
            <div class="text-danger mb-3" id="error-message"></div>
                <p id="aviso" class="text-danger">Por favor, preencha todos os campos para habilitar o botão de cadastro.</p>
                @* <input type="submit" value="Create" class="btn btn-primary" id="btnCadastrar" disabled /> *@
            </div>

            <div class="form-group">
                <label asp-for="Nome" class="control-label">Nome</label>
                <input asp-for="Nome" class="form-control" />
                <span asp-validation-for="Nome" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="TipoPessoa" class="control-label">Tipo de Pessoa</label>
                <select asp-for="TipoPessoa" class="form-control" id="tipoPessoa">
                    <option value="">Selecione o tipo de pessoa</option>
                    @foreach (var tipo in Enum.GetValues(typeof(TipoPessoaEnum)))
                    {
                        <option value="@tipo">@tipo</option>
                    }
                </select>
            </div>

            <div class="form-group" id="campoCpfCnpj" style="display: none;">
                <label asp-for="CpfCnpj" class="control-label">CPF/CNPJ</label>
                <input asp-for="CpfCnpj" class="form-control" id="cpfCnpj" />
                <span asp-validation-for="CpfCnpj" class="text-danger"></span>
                <span id="cpfCnpjValidation" class="text-danger"></span>
            </div>


            <div class="form-group">
                <label asp-for="Cep" class="control-label"></label>
                <input asp-for="Cep" class="form-control" id="cep" onchange="cep()" />
                <span asp-validation-for="Cep" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Endereco" class="control-label"></label>
                <input asp-for="Endereco" class="form-control" id="endereco" readonly />
                <span asp-validation-for="Endereco" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Numero" class="control-label"></label>
                <input asp-for="Numero" class="form-control" />
                <span asp-validation-for="Numero" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Bairro" class="control-label"></label>
                <input asp-for="Bairro" class="form-control" id="bairro" readonly />
                <span asp-validation-for="Bairro" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Complemento" class="control-label"></label>
                <input asp-for="Complemento" class="form-control" />
                <span asp-validation-for="Complemento" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="DataNascimentoFundacao" class="control-label"></label>
                <input asp-for="DataNascimentoFundacao" class="form-control" type="date" />
                <span asp-validation-for="DataNascimentoFundacao" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Email" class="control-label"></label>
                <input asp-for="Email" class="form-control" type="email" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Celular" class="control-label"></label>
                <input asp-for="Celular" class="form-control" />
                <span asp-validation-for="Celular" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="SituacaoCadastral" class="control-label"></label>
                <select asp-for="SituacaoCadastral" class="form-control">
                    <option value="">Selecione a situação cadastral</option>
                    @foreach (SitCadastral value in Enum.GetValues(typeof(SitCadastral)))
                    {
                        <option value="@value">@Enum.GetName(typeof(SitCadastral), value)</option>
                    }
                </select>
                <span asp-validation-for="SituacaoCadastral" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Cidade" class="control-label"></label>
                <select asp-for="CidadeId" class="form-control" id="CidadeId" asp-items="ViewBag.Cidades">
                    <option value="">Selecione a cidade</option>
                    @foreach (var cidade in ViewBag.Cidades)
                    {
                        <option value="@cidade.Value">@cidade.Text</option>
                    }
                </select>
                <span asp-validation-for="CidadeId" class="text-danger"></span>
            </div>

            <button type="submit" value="Create" class="btn btn-primary" id="btnCadastrar" disabled>Cadastrar</button>
            <a asp-action="Index" class="btn btn-secondary">Voltar Para Listagem</a>
        </form>
    </div>
</div>



@section Scripts {

    <script>

        // Função para verificar se o CPF ou CNPJ está no formato correto
        function validarCpfCnpj() {
            var tipoPessoa = document.getElementById("tipoPessoa").value;
            var cpfCnpj = document.getElementById("cpfCnpj").value.replace(/[^\d]/g, ''); // Remover caracteres não numéricos
            var cpfCnpjValidation = document.getElementById("cpfCnpjValidation");

            // var btnCadastrar = document.getElementById("btnCadastrar");


            if (tipoPessoa === 'CPF' && cpfCnpj.length !== 11) {
                console.log('cpf invalido');
                document.getElementById("btnCadastrar").disabled = true;
                cpfCnpjValidation.textContent = 'CPF deve ter 11 números';
                return false;
            } else if (tipoPessoa === 'CNPJ' && cpfCnpj.length !== 14) {
                document.getElementById("btnCadastrar").disabled = true;
                cpfCnpjValidation.textContent = 'CNPJ deve ter 14 números';
                return false;
            }

            cpfCnpjValidation.textContent = ''; // Limpar mensagem de validação se estiver correta
            return true;
        }

        // Função para habilitar/desabilitar o campo de CPF/CNPJ com base na seleção do tipo de pessoa
        function habilitarCampoCpfCnpj() {
            var tipoPessoa = document.getElementById("tipoPessoa").value;
            var campoCpfCnpj = document.getElementById("campoCpfCnpj");

            if (tipoPessoa === 'CPF' || tipoPessoa === 'CNPJ') {
                campoCpfCnpj.style.display = 'block';
                campoCpfCnpj.removeAttribute('disabled');
            } else {
                campoCpfCnpj.style.display = 'none';
                campoCpfCnpj.setAttribute('disabled', 'disabled');
            }
        }

        // Adicionar eventos de mudança para o campo tipoPessoa e cpfCnpj
        document.getElementById("tipoPessoa").addEventListener("change", function () {
            habilitarCampoCpfCnpj();
            validarCpfCnpj();
        });

        document.getElementById("cpfCnpj").addEventListener("input", function () {
            validarCpfCnpj();
        });

        // Chamar a função de habilitarCampoCpfCnpj inicialmente para definir o estado inicial do campo
        habilitarCampoCpfCnpj();

        // Adicionar eventos de mudança para o campo tipoPessoa e cpfCnpj
        document.getElementById("tipoPessoa").addEventListener("change", function () {
            habilitarCampoCpfCnpj();
            validarCpfCnpj();
        });

        document.getElementById("cpfCnpj").addEventListener("input", function () {
            validarCpfCnpj();
        });


        $(document).ready(function () {
            // Função para verificar se todos os campos estão preenchidos
            function validarCampos() {
                var camposPreenchidos = true;
                // Verifica cada campo do formulário
                $('.form-control').each(function () {
                    // Se algum campo estiver vazio, define a variável para false
                    if ($(this).val() === '') {
                        camposPreenchidos = false;
                        return false; // Interrompe o loop
                    }
                });

                var tipoPessoa = document.getElementById("tipoPessoa").value;
                var cpfCnpj = document.getElementById("cpfCnpj").value.replace(/[^\d]/g, '');
                // Habilita ou desabilita o botão com base no resultado da verificação
                if (tipoPessoa === 'CPF' && cpfCnpj.length !== 11) {
                    console.log('cpf invalido');
                    document.getElementById("btnCadastrar").disabled = true;
                    cpfCnpjValidation.textContent = 'CPF deve ter 11 números';
                    return false;
                } else if (tipoPessoa === 'CNPJ' && cpfCnpj.length !== 14) {
                    document.getElementById("btnCadastrar").disabled = true;
                    cpfCnpjValidation.textContent = 'CNPJ deve ter 14 números';
                    return false;
                }
                // else if (tipoPessoa === 'CNPJ' && cpfCnpj.length == 14) {
                //     document.getElementById("btnCadastrar").disabled = false;
                // } else if (tipoPessoa === 'CPF' && cpfCnpj.length == 11) {
                //     document.getElementById("btnCadastrar").disabled = false;
                // }
                $('#btnCadastrar').prop('disabled', !camposPreenchidos);

                // Exibe ou oculta a mensagem de aviso com base no resultado da verificação
                $('#aviso').toggle(!camposPreenchidos);
            }

            // Chamada inicial para verificar o estado dos campos
            validarCampos();

            // Adiciona um evento de input a todos os campos do formulário
            $('.form-control').on('input', function () {
                validarCampos(); // Chama a função para verificar o estado dos campos quando algum deles for preenchido
            });
        });

        $(document).ready(function () {
            // Intercepta o evento de envio do formulário
            $('form').submit(function (event) {
                // Impede o envio padrão do formulário
                event.preventDefault();

                // Serializa os dados do formulário
                var formData = $(this).serialize();

                // Faz a solicitação AJAX para criar a pessoa
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("Create", "Pessoa")',
                    data: formData,
                    success: function (response) {
                        // Verifica se a criação foi bem-sucedida e há um URL de redirecionamento
                        if (response.success && response.redirectUrl) {
                            // Redireciona o usuário para o URL especificado
                            window.location.href = response.redirectUrl;
                        } else {
                            console.log('response ', response);
                            // Se houver algum problema com a resposta do servidor, exibe uma mensagem de erro genérica
                            $('#error-message').text(response.error);
                        }
                    },
                    error: function (xhr, status, error) {
                        Debugger;
                        // Manipula erros de solicitação
                        console.log('xhr.responseText ', xhr.responseText); // Exibe a resposta de erro do servidor no console
                        console.log('xhr.responseJSON ', xhr.responseJSON);
                        console.log('error ', error);
                        // Verifica se a resposta é um objeto JSON e se contém uma propriedade 'error'
                        if (xhr.responseJSON && xhr.responseJSON.error) {
                            // Exibe a mensagem de erro específica na tela
                            $('#error-message').text(xhr.responseJSON.error);
                        } else {
                            // Se não houver mensagem de erro específica, exibe uma mensagem genérica
                            $('#error-message').text('Erro ao criar pessoa. Por favor, tente novamente.');
                        }
                    }
                });
            });
        });

        $(document).ready(function () {
            $('#cep').on('input', cep);
        });

        function cep() {
            // Obtém o elemento de entrada com o id "cep"
            var inputCEP = document.getElementById('cep');

            var valorCEP = inputCEP.value;

            var dados = {
                cep: valorCEP // Nome do parâmetro e valor do CEP
            };

            if (valorCEP.length == 8) {
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("ConsultaEnderecoCEP","Pessoa")',
                    data: dados,
                    success: function (response) {
                        console.log('response cep ', response);
                        var endereco = JSON.parse(response);

                        $('#endereco').val(endereco.logradouro);
                        $('#bairro').val(endereco.bairro);
                    }
                })
            }
        }

    </script>
}